1.你说一下店铺入驻业务流程
    1，先判断各必填参数是否为空
        所有参数单独判断
    2，判断管理员两次密码是否一致
        在employeedomain中添加一个确认密码的字段
    3，判断店铺是否存在
        通过店铺的唯一属性在数据库中查询，
    4，判断管理员是否存在，（本项目允许存在，但需要是未绑定店铺且未被禁用的员工）
        存在需分别判断：
            1，是否绑定了店铺
            2，是否被禁用

        是未绑定店铺且未被禁用的员工：
            1，将管理员的id赋值给店铺的adminid属性
            2，添加店铺并返回主键id
            3，将返回的店铺id设置给管理员的shopid属性
            4，修改管理员
    5，管理员不存在
        1，根据参数新建一个管理员返回主键id
        2，将返回的id设置给店铺对象的adminid属性
        3，添加店铺并返回主键id
        4，将返回的店铺id设置给管理员的shopid属性
        5，修改管理员



2.什么是Fastdfs，你说一下Fastdfs的原理
    是一款开源的分布式文件系统

    原理：
        fastdfs底层分为两部分：
            1，tracker server: 负责负载均衡和调度，判断调用那个Storage server提供服务
            2，Storage server：真正做文件上传和下载的服务器，受Tracker server调用
        执行流程：
            发送请求到fastdfs
            -> TrackerServer收到请求根据策略选择Storage server进行服务
            -> 通过Storage server实现上传和下载

   使用：
        fastdfs执行上传完成后会返回两个字符串：
            1，组名,
            2，图片路径访问图片
            一般会将其拼接并保存到数据库
        访问：
            使用IP+访问端口+组名+图片路径访问图片



3.项目中你们的业务异常是如何处理的？
    根据业务自定义了业务异常。
    自定义异常：
        继承运行时异常，提供无参构造和有String类型的massage参构造

    在业务实现类中通过抛出业务异常的方式向controller层传递信息
    controller根据捕获抛出的业务异常判断业务是否执行成功，
    如果执行失败，根据业务异常的异常信息向前端返回


4，店铺入驻时判断管理员的业务逻辑
    项目允许使用数据库中存在的员工对象，
    但需保证该员工未绑定店铺，即shopId为null
    且员工的状态不能为禁用，即：state不为0

    所以店铺入驻时判断逻辑如下：
        1，存在对象
            1，根据账号，即username查询 如存在对象
            2，对象不为空继续判断shopId 是否为null，不为null则抛出异常
            3，shopId 为null则继续判断state是否不等于0  若等于0 则抛出异常
            4，state也不为0 则将该对象的id绑定到店铺对象的adminId属性上，一起添加到数据库
            5，将店铺对象的id绑定到员工对象的shopId属性上，并执行员工修改方法

        2，不存在对象
            1，先根据前端返回的数据创建员工对象，并返回id
            2，将该对象的id绑定到店铺对象的adminId属性上，一起添加到数据库
            3，将店铺对象的id绑定到员工对象的shopId属性上，并执行员工修改方法
