删除
    1，@click="handleDel(scope.$index, scope.row) 此事件中scope.row会将当前行数据传入事件中
    2，在点击事件中
        1，删除多余的代码
        2，通过Axios发送delete请求传入当前行的id
        3，根据请求的result响应页面
        4，成功则跳转到首页
    3，后端已经写好了，直接执行

批量删除
    前端：
        1，在单击事件中
            1，获取id数组
                var ids = this.sels.map(item => item.id);
                sthis.sels 会将所有选中行的数据返回
            2，删除多余代码
            3，发送 patch 请求传入id数组
            4，根据请求的result响应页面
            5，成功则跳转到首页

    后端：
        1，编写patch请求方式的批量删除方法接收id数组
        2，一路向下，直到mapper层
        3，编写SQL通过foreach遍历数组
            <foreach collection="array" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>

新增/编辑二合一
    前端：
        页面修改：
            删除新增相关属性，事件，模态框
            新增按钮事件绑定到编辑上，但表单对象的属性需设置为空。
            编辑事件需设置表单对象的属性回显数据

            修改模态框的相关字段，绑定到表单对象
            动态设置模态框的标题

        实现：
            1，获取表单对象
            2，克隆一个表单对象
            3，发送put请求传入克隆的对象
            4，根据请求的result响应页面
            5，成功则跳转到首页

    后端：
        已经实现，直接运行

    部门经理实现：
        前端：
            1，定义一个员工集合字段
            2，定义一个获取所有员工的函数，将数据保存到定义的员工集合中
            3，在钩子函数中调用该函数
            4，从ElementUi中拷贝select选择器到模态框中对应位置
            5，设置下拉框的属性，和展示的字段
                key: 唯一标识
                label：选择后，下拉框展示的字段
                value：实际传递的值
            注意：传递对象必须设置value-key属性

        后端：
            SQL中添加和修改需将manager_id字段通过manager对象的id属性来赋值
            如：manager_id = #{manager.id}

    级联查询：
        前端：
            1，定义一个parent集合字段
            2，定义一个获取部门树数据的函数，结果赋值给parent集合
            3，在钩子函数中调用
            4，从ElementUi中拷贝级联选择器到模态框中对应位置
            5，在选择器中绑定数据，在props属性中配置相应的字段
            6，在修改或新增函数中：将返回的id集合截取最后一个id并封装为上级部门对象再返回

        后端：
            1，在domain中创建子部门集合
            2，创建获取部门树数据接口，以及service层相关
            3-1，在service实现类中：
                1，先查所有部门
                2，创建一个list对象用来返回数据
                3，循环遍历集合，通过parent_id是否为空找到一级部门，并添加到新创建的list中
                    不为空则再开启循环，通过外城循环的parent_id和内层循环的id进行比较，
                    如果相同，则将外层对象添加到内层对象的Children字段中。并结束内层循环
                4，循环完毕返回数据
            3-2 解决时间复杂度的问题
                1，先查所有部门
                2，创建一个list对象用来返回数据
                3，将查询到的所有部门集合转换为map集合
                    departments.stream().collect(Collectors.toMap(Department::getId, dept -> dept));
                4，循环遍历集合，通过parent_id是否为空找到一级部门，并添加到新创建的list中
                   不为空则通过parent_id直接在map集合中拿到父级部门，再将自身添加到父级部门的Children字段中
                5，循环完毕返回数据

        上级部门数据回显：
            前端：
                1，在显示模态框的事件中通过当前行数据获取dirPath （/2/7/18）
                2，通过'/'分割得到数组['','2','7','18']
                3，通过循环去掉首尾，转换为int类型并添加到回显数组中
                4，赋值给级联选择器使用的集合属性

            后端：
                在实现类的添加和修改方法中
                    1，判断上级部门字段是否为空
                        为空则拼接 "/" + id  到dirPath属性

                        不为空：
                            1，通过上级部门的id获取上级部门对象
                            2，通过上级部门对象获取上级部门对象的dirPath属性
                            3，拼接 上级部门对象的dirPath属性 + "/" + 当前部门的id  到当前部门的dirPath属性
                    2，调用修改方法
                    3，添加方法需先执行添加操作
