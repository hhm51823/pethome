
用户注册业务点击获取手机验证码的流程分析：
    前端：
        1，基本的表单属性验证
        2，给获取验证码按钮绑定单击事件
        3，封装对象，发送Axios请求
        4，发送请求后将按钮设置为不可点击
        5，设置定时器任务，将按钮的text设置为1分钟倒计时
            倒计时结束恢复按钮的可点击
        6，根据后端返回的结果做出相应

    后端；
        分析：
            1，判断电话，图形验证码，图形验证码redis的key是否为空
            2，根据图形验证码的key去redis中取值
                1，不存在则抛出异常
                2，存在则继续判断
            3，判断取出的值和传递进来的值是否相等（不区分大小写）
                1，不相等则抛出异常
                2，相等则继续判断
            4，通过电话去user表中查询是否存在该对象
                1，存在则抛出异常
                2，不存在则继续下一步

            5，将业务键拼接电话作为key去redis中查询
                1，查不到
                    1，随机生成验证码
                    2，获取时间戳拼接验证码作为value，存入redis中，并设置时效为3分钟
                2，能查到
                    1，将value的值拆分为验证码和时间戳
                    2，或取新的时间戳与redis中的对比
                        1，小于60秒
                            抛出异常：一分钟后才能再次获取！
                        2，大于60秒
                            将验证码拼接新的时间戳作为value存入redis中，并设置时效为3分钟
            6，使用工具发送短信验证码


        为什么需要 电话拼接业务键作为key，验证码拼接时间戳作为value存入redis
            1，电话拼接业务键作为key：为了保证唯一性，而单纯使用电话号码并不合理，因为项目中还有很多地方需要使用到电话号码作为key的地方
            拼接业务键即保证了唯一性，又能避免和其他业务发生冲突
            2，发送验证码需要判断距离上一次发送是否超过一分钟，超过才能继续发送，目前比较好的方法就是将时间戳一起存入redis中

用户注册业务点击注册的流程分析：
    前端：
        0，基本的表单验证
        1，给注册按钮绑定点击事件
        2，将表单数据封装并发送Axios请求
        3，根据后端的返回做出响应

    后端：
        1，判断所有参数是否为空
        2，判断两次电话号码是否一致，并判断验证码是否正确
            使用业务键拼接电话号码从redis中取值
            1，没有值：表示两次电话不一致或者验证码过期了
            2，有值，比较前端传回的手机验证码是否正确
                1，不正确则抛出异常
                2，正确则继续
        3，再次判断该用户是否存在，避免在高并发的时候出现数据重复录入的情况
        4，将前端返回的值存入user对象
        5，初始化user对象必要属性的值
            1，随机生成盐值
            2，密码拼接盐值使用MD5加密
            3，用户名设置为电话号码
        6，添加user
        7，复制user的属性到logininfo对象中
            1，还需设置用户类型：管理员还是普通用户
        8，设置user对象的logininfo_id属性并修改

    MD5 不可逆加密技术，只能加密不能解密
        现在简单的密码已经能够被破解了，所以需要拼接盐值使密码无法破解

    同步修改登录信息：
        因为我们只使用了logininfo一张表来实现管理员和用户的登录验证。
        所以，管理员或者用户的增删改都需要同步到logininfo表中，才能保证数据的一致性

        增：
            1，以前业务并没有设置盐值和密码加密，需要一并设置了
            3，执行添加员工或用户
            3，将员工或用户的属性copy到logininfo对象中
            4，添加logininfo
            5，设置logininfo_id属性并执行修改

        删：
            1，根据id先查出员工或用户对象
            2，根据logininfo_id属性删除logininfo
            3，根据id删除员工或用户

        改：
            1，如果修改了密码则：盐值和密码加密重新设置
            2，执行修改
            3，将员工或用户的属性copy到logininfo
            4，copy时注意logininfo的id不能被覆盖
            5，修改logininfo

    业务高度封装：
        在业务层中最应该调用的应该是本模块的数据层mapper方法，而不应该调用其他模块的数据层mapper方法
        如果你想要在本模块中操作其他模块，那么就注入其他模块的业务层类，调用业务层方法进行其他模块的操作

