
前端项目部署：
    1，vue-cli架构
        1，执行npm run build命令打包
        2，将dist文件中的所有文件和文件夹复制到Tomcat的ROOT文件中，启动Tomcat就可以访问项目了
        注意：
            1，打包前，需删除脚手架项目自动配置的别名
            2，复制前需清空ROOT文件夹
            3，server.xml中不能配置其他项目
    2，div+css架构
        直接将整个项目放到Tomcat的ROOT文件即可
前端项目的调试(热部署)：
    1，vue-cli架构
        使用启动命令npm run dev，项目代码改动之后页面就会热更新成功
    2，div+css架构
        1，安装 live-server服务器：
            安装命令(全局安装)：npm install -g live-server
        2，指定端口号启动 ：live-server --port=80


用户模块核心功能
    1，注册
    2，登录
    3，支付，订单，个人订单
    4，积分

    注册：
        需要验证的内容：
            1，所有字段非空判断
            2，两次密码是否一致
            3，发送验证码的手机号和注册的手机号是否一致
            4，图片验证码是否输入正确
            5，短信验证码是否正确

        为什么需要图片验证码：
            防止恶意注册，用户需正确输入图片验证码的值才能向用户填入的手机号发送短信

        如何实现图片验证码：
            前端；
                因为图片验证码不需要长期保存，只需临时保存，而且图片验证码也需要有时效性，
                我们将其保存在redis中，并且设置过期时间为5分钟，5分钟后验证码失效

                redis保存数据的方式是key - vaule的方式，vaule保存图片验证码的值，
                而key应该设置为唯一的标识，本项目使用的是UUID，生成后将传入后端进行保存。

                用户每次点击刷新图片都会生成一个UUID传到后端，这样不合理，我们将生成的UUID保存到浏览器的sessionStorage中
                每次生成新的验证码，会先在sessionStorage中查找是否有保存UUID的key，有就将其保存到sessionStorage中
                没有才创建一个新的。

                本地化存储：浏览器将数据(key-vaule的方式)保存到本地的两种方式：
                    sessionStorage：
                        sessionStorage 的生命周期是在浏览器关闭前。也就是说，在整个浏览器未关闭前，其数据一直都是存在的

                    localStorage：localStorage的生命周期是永久性的。假若使用localStorage存储数据，即使关闭浏览器，
                        也不会让数据消失，除非主动的去删除数据，

                1，在页面中添加图片验证码代码块
                2，导入vue和Axios的js文件
                3，创建一个公共的common.js文件用来执行公共的js操作
                    引入Axios。并将其引入到注册页面中
                4，创建vue对象
                    绑定组件
                    设置data中的字段
                    函数对象
                    钩子函数
                5，在钩子函数中发送请求，将返回的base64编码后的字符串拼接前缀并设置到图片验证码绑定的字段中
                6，图片单击刷新图片，从新发送请求


            后端：
                1，字符串工具类生成随机的 4位字符串
                2，使用VerifyCodeUtils验证码base64生成器生成Base64编码后的文本
                    1，使用java提供的2D图形技术将其生成图片
                    2，使用base64将图片编码为文本进行传递
                3，将前端传过来的通过UUID生成的ID和随机生成的4位字符串保存到Redis中并设置过期时间为5分钟
                4，将Base64编码后的文本封装返回给前端

        今日技术点分析：
            1.UUID：
                为了给注册用户对应的图形验证码绑定唯一标识，电话号码和IP都不合理。
                UUID可以生成唯一ID，符合我们的业务需求。
            2，本地存储技术
                1，.localStorage：
                    localStorage的生命周期是永久性的。假若使用localStorage存储数据，即使关闭浏览器，也不会让数据消失，除非主动的去删除数据，

                2.sessionStorage：
                    sessionStorage 的生命周期是在浏览器关闭前。也就是说，在整个浏览器未关闭前，其数据一直都是存在的
                    根据业务需求，sessionStorage更合理。
                两种方式都是是将数据以key:value形式存储到浏览器的对象技术。只是生命周期不一样

            3.0，字符串工具类：就是针对字符串的一系列操作的方法，包括可以生成随机的指定位数的字符串。
            3.1，2D引擎技术：是Java自带的一个可以生成图像的技术，可以将字符串转换为图片格式。

            4.Base64：可以将图片等流文件使用Base64编码转换为字符串，前端可以通过Base64解码获取到流文件

            5.redis：图形验证码所用到的数据都只需临时保存，且需要具有时效性，redis非常符合我们的需求。
                1.springBoot集成Redis步骤
                    1.引入支持
                    2.编写yml配置
                    3.注入RedisTemplate保存或取值操作





